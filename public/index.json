[{"categories":["AI for Work"],"content":"I sought Grok3’s help to do DeepSearch to provide me a report on exsiting tools that can use a github repo as source of searchable content. Here is the prompt and the response. Prompt : I am looking for software that manager a blogsite whose content can be stored as MarkDown on Github. It should basic blogsite features that as chronologically ordered posts, search, tagging for categorisation. ","date":"2025-03-05","objectID":"/posts/first_post/:0:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Key Points It seems likely that Hugo is a suitable software for managing a blog site with Markdown content stored on GitHub, offering features like chronologically ordered posts, search, and tagging. Research suggests Jekyll is another viable option, with a larger community but potentially slower performance compared to Hugo. The evidence leans toward using static site generators like Hugo or Jekyll, as they integrate well with GitHub Pages for hosting. ","date":"2025-03-05","objectID":"/posts/first_post/:1:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Software Recommendation For managing your blog site with content stored as Markdown on GitHub, Hugo is a strong choice. It’s a fast and efficient static site generator that supports Markdown files, allowing you to store your posts in a GitHub repository and generate a blog site with features like chronologically ordered posts, search, and tagging. Hugo can be easily set up to work with GitHub Pages, making deployment straightforward. ","date":"2025-03-05","objectID":"/posts/first_post/:2:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Features and Integration Hugo has built-in support for tagging through its taxonomy system, and you can configure search functionality using tools like Algolia or client-side libraries like Fuse.js. This ensures your blog can display posts in chronological order and allow users to search and filter by tags. Since your content is already in Markdown on GitHub, Hugo can pull these files directly, simplifying the management process. ","date":"2025-03-05","objectID":"/posts/first_post/:2:1","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Unexpected Detail An interesting aspect is that while Hugo is known for speed, tools like Netlify CMS or Forestry (now part of Tina) can provide a user-friendly interface for managing your GitHub content, though they may require additional setup for search and tagging features. ","date":"2025-03-05","objectID":"/posts/first_post/:2:2","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Survey Note Detailed Analysis of Blog Management Software with Markdown on GitHub This note provides a comprehensive exploration of software options for managing a blog site where content is stored as Markdown on GitHub, focusing on the requirements of chronologically ordered posts, search, and tagging. The analysis considers various static site generators and related tools, drawing from extensive research to ensure a thorough understanding of the landscape. ","date":"2025-03-05","objectID":"/posts/first_post/:3:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Background and Requirements The task involves finding software to manage a blog site with specific features: chronologically ordered posts, search functionality, and tagging for categorization, with content stored as Markdown files in a GitHub repository. This setup implies a static site generator or a content management system (CMS) that integrates with GitHub, leveraging its version control capabilities while ensuring the blog meets user expectations for usability and organization. ","date":"2025-03-05","objectID":"/posts/first_post/:3:1","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Evaluation of Static Site Generators Static site generators are ideal for this scenario, as they generate HTML from Markdown files, which can be hosted on platforms like GitHub Pages. Several popular options were evaluated, including Jekyll, Hugo, Pelican, Gatsby, and Hexo, based on their support for Markdown, integration with GitHub, and the required features. Jekyll: As one of the oldest and most established static site generators, Jekyll is written in Ruby and has native support on GitHub Pages. It supports Markdown and has features for tagging through frontmatter, with chronologically ordered posts handled by date metadata. However, search requires additional plugins like Jekyll Algolia, and its build times can be slower, especially for larger sites. The community is large, offering extensive documentation and themes, which may appeal to users seeking familiarity and support (Jekyll Official Website). Hugo: Built with Go, Hugo is known for its speed and efficiency, often building sites in under a second. It supports Markdown, has a built-in taxonomy system for tagging, and can handle chronologically ordered posts through date-based sorting. Search can be implemented using client-side libraries like Fuse.js or services like Algolia, as detailed in its documentation (Hugo Official Website). Hugo’s installation is simpler, requiring no external dependencies, making it user-friendly for beginners. Its performance and ease of use make it a strong candidate for this use case. Pelican: A Python-based static site generator, Pelican supports Markdown and has features for tagging and categorization through metadata. Chronologically ordered posts are supported via date fields, but search functionality is not built-in, requiring third-party integrations. Its ecosystem is smaller compared to Jekyll and Hugo, which might limit resources for advanced features (Pelican Documentation). Gatsby: Built on React, Gatsby offers flexibility with Markdown through plugins like gatsby-transformer-remark. It supports tagging via frontmatter and GraphQL queries, with chronologically ordered posts managed through sorting. Search can be integrated with services like Algolia, but setup may require more technical knowledge due to its React-based nature. It’s suitable for users comfortable with modern JavaScript frameworks (Gatsby Official Website). Hexo: A Node.js-based generator, Hexo supports Markdown and has tag plugins for categorization, with posts ordered chronologically by date. Search requires additional plugins, and while it integrates well with GitHub, its community is smaller compared to Hugo and Jekyll (Hexo Official Website). It’s another viable option but may lack the extensive resources of the top contenders. ","date":"2025-03-05","objectID":"/posts/first_post/:3:2","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Additional Tools and Platforms Beyond static site generators, tools like Netlify CMS and Forestry (now part of Tina) were considered for their ability to provide a user-friendly interface for managing GitHub content. Netlify CMS, an open-source CMS, allows editing Markdown files directly in the browser and integrates with GitHub, but tagging and search may require custom configurations (Netlify CMS Documentation). Forestry, similarly, offers a GUI for content management but has been transitioned to Tina, which focuses on headless CMS with Git support (TinaCMS Website). These tools can complement static site generators but may not fully manage the blog site without additional setup. ","date":"2025-03-05","objectID":"/posts/first_post/:4:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Performance and Community Considerations Hugo’s speed, with build times often under a second, is particularly advantageous for frequent updates, as noted in comparisons like Hugo vs Jekyll: Choosing the Right Tool. Jekyll, while slower, has a vast ecosystem of plugins and themes, which might be beneficial for users seeking customization without extensive coding. The choice between them may depend on the user’s technical comfort and site scale, with Hugo recommended for larger or performance-critical blogs. ","date":"2025-03-05","objectID":"/posts/first_post/:5:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Conclusion and Recommendation Given the requirements, Hugo emerges as the recommended software due to its speed, ease of setup, and robust feature set for blogging, including support for Markdown, tagging, and configurable search. It integrates seamlessly with GitHub Pages, ensuring the content stored as Markdown on GitHub can be effectively managed and deployed. For users seeking a larger community and more themes, Jekyll is a viable alternative, but Hugo’s performance edge makes it the preferred choice for modern blogging needs. ","date":"2025-03-05","objectID":"/posts/first_post/:6:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["AI for Work"],"content":"Key Citations Jekyll Simple, blog-aware, static sites Hugo Official Website Pelican Documentation Gatsby Official Website Hexo Official Website Netlify CMS Documentation TinaCMS Website Hugo vs Jekyll: Choosing the Right Tool ","date":"2025-03-05","objectID":"/posts/first_post/:7:0","tags":["technology","blogging","Grok3","DeepSearch","GTD"],"title":"Selecting a tool for a managing blogsite","uri":"/posts/first_post/"},{"categories":["projects"],"content":"What I Built SpeechTrack is a AI based App built as a part of submission to a dev-challenge sponsored by AssemblyAI ","date":"2025-03-05","objectID":"/posts/speechtrack/:1:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"SpeechTrack Getting a deeper understanding of speech with AssemblyAI Ever wondered how your speech sounds to others? Clarity and speed are the heartbeat of effective communication, but striking the perfect balance can be a challenge. Enter SpeechTrack, your real-time speech companion. With intuitive visual indicators for Clarity and Tempo, SpeechTrack empowers you to refine your delivery through post speech Feedback. Whether you’re preparing for a big presentation, a podcast, or an important conversation, SpeechTrack helps you speak with confidence, precision, and impact. Try it now and transform the way you communicate! Technical Overview App - built using REMIX.run \u0026 React web framework tailwind.css and daisyUI for styling App modules (at a high level) Microphone - to stream Audio Websocket module for receiving messages from AssemblyAI AudioProcessor - to combine streamed Audio chunks to a .wav File object Various React components to process \u0026 assemble received messages and maintain application state Backend for front to deal with: - API keys and temporary tokens - Uploading audio, - Getting transcripts, - asking LeMUR to do evaluation of Speech Finally present the Report in MARKDOWN format Maintain a history of last 3 Speeches in localStorage on client side ","date":"2025-03-05","objectID":"/posts/speechtrack/:1:1","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Demo Six minute video explaining how SpeechTrack works Screenshot: Shows Server Logs while doing above video ","date":"2025-03-05","objectID":"/posts/speechtrack/:2:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Here are some use cases: ","date":"2025-03-05","objectID":"/posts/speechtrack/:3:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"1. Learning from good speakers. A good speaker can keep the audience spell bound. What is it that they do well that we can replicate. This inspiring speech is from the movie Coach Carter. Here is the Speech Evaluation Report from LeMUR ","date":"2025-03-05","objectID":"/posts/speechtrack/:3:1","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Analysis \u0026 Feedback Here’s my analysis and feedback for the speech transcript in a human-readable Markdown format: ","date":"2025-03-05","objectID":"/posts/speechtrack/:4:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Speech Evaluation Strengths Effective Use of Pauses: With 8.75 pauses per minute (ppm), the speaker is within the ideal range of 5-10 ppm. This allows listeners to process key ideas and adds emphasis to important points. Inspirational Content: The speech contains powerful, motivational messages about personal empowerment and positive influence on others. Concise Delivery: At 104 words, the speech is relatively brief, which can help maintain audience attention and focus on core ideas. Areas for Improvement Speaking Speed: At 130 words per minute (wpm), the pace is slightly below the ideal range of 140-200 wpm. Increasing the speed slightly could make the delivery more engaging. Filler Words: The use of “ah” was noted in the transcript. Reducing or eliminating filler words can enhance clarity and professionalism. Structure: While the content is inspirational, a clearer structure with an introduction, main points, and conclusion could improve overall coherence. Summary Feedback The speaker delivers a powerful message with good use of pauses, allowing the audience to absorb the inspirational content. To enhance the speech: Increase speaking speed slightly to reach the ideal range of 140-200 wpm. Eliminate filler words like “ah” to maintain a smooth flow of ideas. Consider structuring the speech more clearly, perhaps by grouping ideas into distinct sections. The personal touch at the end (“Sir, I just want to say thank you. You saved my life.”) is impactful but seems abrupt. Consider a smoother transition or integration of this personal element. By implementing these suggestions, the speaker can elevate an already powerful message to create an even more impactful and polished presentation. Screenshot: Shows Transcript ","date":"2025-03-05","objectID":"/posts/speechtrack/:4:1","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"2. In-audio directives for Speech summary and sentiment Analysis. The first line of audio is always checked for any directives (Summary, Sentiment Analysis) before speech-\u003etext transcript generation - see process details below. In the following video hear the first line direct the app to prepare for summary and sentiment analysis. Screenshot: Realtime transcript with directives to parameter object The various steps in the process Speech-\u003eTransript-\u003eInference. ## All lines except those with leading ##'s are from server logs ## Detection of directive from first line f(getComnand) from first FinalTranscript: I would like you to generate a catchy summary and sentiment analysis of the following story. { summarization: true, summary_model: 'catchy', summary_type: 'gist', sentiment_analysis: true } ## The streamed audio packets are then combined with .wav header and ## file object for the wave file is uploaded url : https://api.assemblyai.com/v2/upload ## we then have a URL to the uploaded audio f(fileUpload) : Uploaded Successfully { upload_url: 'https://cdn.assemblyai.com/upload/ebabc86a-0a1d-4988-a6f0-5dc06352921d' } f(fileUpload): 472.023ms /api/upload fileUpload: 540.219ms ## NOTE: parameters for audioURL -\u003e transcript ## disfluencies - so assemblyai can transcribing filler words ## Parameters below are computed for every speech and depend ## on first line - see below ## audio_start_from - ensure we don't include first line while asking /api/upload getTranscriptFromURL: 6.628s f(getTranscriptFromURL) { audio: 'https://cdn.assemblyai.com/upload/ebabc86a-0a1d-4988-a6f0-5dc06352921d', disfluencies: true, summarization: true, summary_model: 'catchy', summary_type: 'gist', sentiment_analysis: true, audio_start_from: 10010 } ## Transcript id along with a CUSTOM PROMPT is submitted to leMUR for ## specfic speech evaluation response. ## CUSTOM PROMPT contains: ## 1. Description of the Task evaluation details, ## 2. Required outline of the evaluation report ## 3. Acceptable standards of a good speech ## 4. App generated metrics (duration, words per min, pauses, etc) ## 5. Report format as markdown /api/feedback 1129a02c-4a28-49ea-8fbf-cb55f89a0214 f(askLeMUR): 9.234s Screenshot: Transcription and Sentiment Analysis CUSTOM PROMPT used with LeMUR You are **SpeechEvaluator**, an expert in analyzing and providing constructive feedback on speech delivery. Your role is to assess the quality of a speaker's performance based on key metrics and provide actionable insights to help them improve. You will be given structured data from a speech analysis, including metrics like *Words per Minute (*wpm*)*, *Pauses per Minute (*ppm*)*, duration, and word count, along with a transcript. **Your Task**: 1. **Analyze Metrics**: Evaluate the speaker's delivery based on provided quantitative data: - *wpm*: Assess speaking speed (ideal range: 140–200 wpm). - *ppm*: Evaluate pause usage (ideal range: 5–10 ppm). - *duration*: Consider how metrics align with speech length. - *wc*: Check for verbosity or brevity based on context. 2. **Assess Transcript**: - Identify clarity issues, such as filler words, redundancy, or lack of focus. - Highlight the effectiveness of pauses and transitions between topics. - Comment on structure and coherence, ensuring ideas flow logically. 3. **Provide Feedback**: - Highlight **strengths** (e.g., engaging delivery, appropriate speed). - Suggest **areas for improvement**, including specific and actionable tips. 4. **Use Accessible Language**: - Ensure your feedback is clear and easy for the speaker to understand, even if they are new to public speaking or storytelling or presentations. ### **Example Output**: #### **Strengths** - *Good Speaking Speed*: wpm is within the recommended range, making the delivery engaging and energetic. - *Use of Pauses*: Pauses are moderately frequent, allowing listeners time to process key ideas. #### **Areas for Improvement** - *Filler Words*: Repeated use of 'um', 'uh', 'like', 'you know', and 'I mean","date":"2025-03-05","objectID":"/posts/speechtrack/:4:2","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Journey The Assembly AI Hackathon immediately caught my attention. Exploring their Playground gave me a basic understanding of their APIs, and soon I was diving deeper with httpie, testing almost all REST APIs. The Speech-to-Text Streaming API stood out as the most exciting, and I knew it would be the foundation of my project. ","date":"2025-03-05","objectID":"/posts/speechtrack/:5:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Building SpeechTrack With the help of ChatGPT, I brainstormed ideas and finalised SpeechTrack, a tool to provide real-time feedback to speakers on: Clarity, measured through confidence scores. Tempo, tracked in words per minute. The name was a nod to Assembly AI’s focus on unraveling speech, evolving from ChatGPT’s original suggestion of VoiceTrack. ","date":"2025-03-05","objectID":"/posts/speechtrack/:6:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Steps in the Journey Exploring APIs: I familiarised myself with Assembly AI’s tools using httpie. Ideation: Brainstormed (w/LLMs) and refined the concept for SpeechTrack. Implementation: Used the Streaming API for real-time speech insights. Faced challenges with audio streaming and creating WAV files. Resources like the Assembly AI Realtime Transcription Example and @3kb-dev’s WAV file guide were lifesaver. Prompt Coverage. In my opinion SpeechTrack qualifies for all 3 challenge prompts as it ended up using: Streaming Speech-to-Text - to provide realtime cues (providing the audio and real-time transcript) Speech-to-Text - Transcribe Audio (with in-audio parameter detection) Speech Understanding (using transcript of (b) and LeMUR to provide analysis and feedback on Speech) ","date":"2025-03-05","objectID":"/posts/speechtrack/:7:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Feedback for Assembly AI The API’s are excellent and can be better if the following were available (I hope I did not miss reading it in the documentation) A way to download the audio file that was uploaded to Assembly AI A Streaming client for LeMUR. I noticed my app working locally but failing when hosted on vercel.com with time outs or http 504’s Lastly, For LeMUR tasks I would like have an API similar to what OpenRouter provides as that will expand access to models and allow good control over what we can instruct the model to do. Overall, I see a lot of possibilities, keep up the good work. ","date":"2025-03-05","objectID":"/posts/speechtrack/:8:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["projects"],"content":"Reflections \u0026 Conclusion Though the journey had its hurdles, completing SpeechTrack was immensely satisfying. Thanks to Assembly AI for their fantastic APIs, great support (thanks to Lee Vaughn of Support Engineering at Assembly AI) and the Dev community for their support. Here’s to more learning and creating in the future! ","date":"2025-03-05","objectID":"/posts/speechtrack/:9:0","tags":["technology","assemblyAI","Speech2Text","AI eval","AI"],"title":"SpeechTrack","uri":"/posts/speechtrack/"},{"categories":["HowTo"],"content":" Ever wondered how some GitHub profiles stand out with dynamic stats, vibrant visuals, and an interactive feel? Welcome to the art of creating a dynamic GitHub profile page! In this post, we’ll dive into showcasing your coding prowess through GitHub statistics to turn your profile into a living resume of your coding journey. Let’s make your GitHub profile not just a page, but an experience. ","date":"2025-03-04","objectID":"/posts/gitprofile/:0:0","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":"Create a GitHub Profile README: GitHub allows you to create a special repository named after your username (e.g., yourusername/yourusername). Navigate to GitHub’s homepage and start creating a new repository. Set the name of the repository to your GitHub username. Ensure the repository is initialised with a README.md file. This file will be displayed on your profile page. ","date":"2025-03-04","objectID":"/posts/gitprofile/:1:0","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":"Here is how you add Dynamic GitHub Stats: ","date":"2025-03-04","objectID":"/posts/gitprofile/:2:0","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":"GitHub Readme Stats: Use services like github-readme-stats by Anurag Hazra to generate dynamic stats. You can include your GitHub contributions, stars, forks, and languages used. Here’s how you can add it to your README: Copy the Markdown link below, replacing yourname with your GitHub username: [![yourname's GitHub stats](https://github-readme-stats.vercel.app/api?username=yourname)](https://github.com/yourname) You can customise the appearance via query parameters - more details here. Here is one example - adding icons and changing the theme Copy the Markdown link below, replacing yourname with your GitHub username [![yourname's GitHub stats](https://github-readme-stats.vercel.app/api?username=yourname\u0026show_icons=true\u0026theme=radical)](https://github.com/yourname) ","date":"2025-03-04","objectID":"/posts/gitprofile/:2:1","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":"Displaying Specific Stats: Top Languages: Show the languages you most frequently use by adding: [![Top Langs](https://github-readme-stats.vercel.app/api/top-langs/?username=yourname)](https://github.com/yourname) Streak Stats: Include your coding streak with: Copy the Markdown link below, replacing yourname with your GitHub username [![GitHub Streak](https://streak-stats.demolab.com?user=yourname\u0026border_radius=6)](https://github.com/yourname) ","date":"2025-03-04","objectID":"/posts/gitprofile/:2:2","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":"Profile Readme Generator Tools: If you’re looking for a more user-friendly way, tools like GitHub Profile README Generator GitHub Stats generator Omsimos GitHub StatsGenerator can help you create a personalised README with various stats and styles. These tools provide templates and easy customisation options for your profile. I am sure there is more you can showcase such as, list your top repos and the stats relating to them - check out GitHub Tracker in case you are interested. That’s it devs. By integrating these elements, you can enhance your GitHub profile to better showcase your coding activity and statistics. The exact customisation and choice of services depend on what you want to highlight on your profile. ","date":"2025-03-04","objectID":"/posts/gitprofile/:3:0","tags":["gitprofile","technology","git","profile"],"title":"Github Stats on your Github profile page","uri":"/posts/gitprofile/"},{"categories":["HowTo"],"content":" Hugo has built-in shortcodes and LoveIt Theme extends the shortcodes to do more. Here are some examples of both. ","date":"2025-03-04","objectID":"/posts/hugo/:0:0","tags":["hugo","technology","shortcodes"],"title":"Using shortcodes in Hugo","uri":"/posts/hugo/"},{"categories":["HowTo"],"content":"Details Details allow you to expand some text below a given summary text See the details This is a bold world.This is a bold world. Don’t tread lightly out here as there will be some nefarious character who could ambush you and that wont go well. So beware! ","date":"2025-03-04","objectID":"/posts/hugo/:1:0","tags":["hugo","technology","shortcodes"],"title":"Using shortcodes in Hugo","uri":"/posts/hugo/"},{"categories":["HowTo"],"content":"Tweet Grok 3 generated a p5js animation: 2 eyes on a wireframe face watching the mouse cursor! Eyeballs are 3D wiremesh spheres, pupils black w/ white dot, always looking at cursor. #p5js #CreativeCoding #WebGL #Animation pic.twitter.com/S4j8lzVOH7 — U G Murthy (@murthyug) February 20, 2025 ","date":"2025-03-04","objectID":"/posts/hugo/:2:0","tags":["hugo","technology","shortcodes"],"title":"Using shortcodes in Hugo","uri":"/posts/hugo/"},{"categories":["HowTo"],"content":"Figure SpeechTrack (figure) ","date":"2025-03-04","objectID":"/posts/hugo/:3:0","tags":["hugo","technology","shortcodes"],"title":"Using shortcodes in Hugo","uri":"/posts/hugo/"},{"categories":["HowTo"],"content":"Extended Shortcodes style This is a right-aligned paragraph. admonition This is a tip A tip banner Few Examples This is an example This is another example This is the third example My Favorite Quote Spend a handful of hours a day going fast. Crush a gym session. Do deep work on a project you care about. Spend the rest of the day going slow. Take walks. Read books. Get a long dinner with friends. Either way, avoid the anxious middle where you never truly relax or truly move forward. :– Charles Miller Music Typeit mermaid Pie Chart GitGraph Gantt Chart ","date":"2025-03-04","objectID":"/posts/hugo/:4:0","tags":["hugo","technology","shortcodes"],"title":"Using shortcodes in Hugo","uri":"/posts/hugo/"}]